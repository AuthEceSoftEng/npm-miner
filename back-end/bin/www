#!/usr/bin/env node

/**
 * Module dependencies.
 */
// const path = require('path')
// const path_to_envs = path.resolve(path.join(__dirname, '../..'), '.env')
// require('dotenv').config({path: path_to_envs})
var app = require('../app');
var debug = require('debug')('back-end:server');
var http = require('http');

const MongoClient = require('mongodb').MongoClient;
const url = process.env.MONGODB_URL;

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

let dbClient;
let server;

MongoClient.connect(url, { useNewUrlParser: true, poolSize: 3 }).then(client => {
  const db = client.db('npmminer');
  dbClient = client;
  const collection = db.collection('packages');
  app.locals.collection = collection;
  /**
   * Create HTTP server.
   */
  server = http.createServer(app);

  /**
   * Listen on provided port, on all network interfaces.
   */

   console.log('Connected to DB')
  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);
}).catch(error => console.error(error));

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

// listen for the signal interruption (ctrl-c)
process.on('SIGINT', () => {
  dbClient.close();
  process.exit();
});